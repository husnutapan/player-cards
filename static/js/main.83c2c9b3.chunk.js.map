{"version":3,"sources":["components/atoms/Image/index.js","components/atoms/Button/index.js","components/molecules/Popup/index.js","components/organisms/PlayerInfo/index.js","components/organisms/Banner/index.js","components/templates/PlayerList/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","children","imgSrc","className","src","Button","disabled","value","type","onClick","Popup","isOpen","popupName","closePopup","visible","PlayerInfo","data","useState","showPopup","setShowPopup","showDetail","map","player","key","identifier","img2","first_name","last_name","team","position","Banner","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Player","playerJson","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m2fAeeA,EAND,SAACC,GACgBA,EAApBC,SADwC,IAC9BC,EAAUF,EAAVE,OACjB,OACI,yBAAKC,UAAU,WAAWC,IAAKF,KCSxBG,EATA,SAACL,GAAoC,IACzCC,EAA4CD,EAA5CC,SAAUK,EAAkCN,EAAlCM,SAAUC,EAAwBP,EAAxBO,MAAOC,EAAiBR,EAAjBQ,KAAMC,EAAWT,EAAXS,QAExC,OACI,4BAAQH,SAAUA,EAAUC,MAAOA,EAAOJ,UAAS,kBAAaK,GAAQC,QAASA,GAC5ER,I,gBCcES,EApBD,SAACV,GAAoC,IACxCW,EAAgCX,EAAhCW,OAAQC,EAAwBZ,EAAxBY,UAAUC,EAAcb,EAAda,WACzB,OAAIF,EAEI,kBAAC,IAAD,CAAOG,SAAS,GACZ,yBAAKX,UAAU,gBACX,wBAAIA,UAAU,eAAeS,IAEjC,yBAAKT,UAAU,cACX,yDAEJ,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAAQK,KAAK,YAAYC,QAASI,GAAlC,SACA,kBAAC,EAAD,CAAQL,KAAK,UAAUC,QAASI,GAAhC,WAIF,MCmBHE,EAhCI,SAACf,GAAoC,IAC7CG,EAAoCH,EAApCG,UAA4Ba,GAAQhB,EAAzBC,SAAyBD,EAAfO,MAAeP,EAARgB,MADgB,EAGjBC,oBAAS,GAHQ,mBAG5CC,EAH4C,KAGjCC,EAHiC,KAK/CC,EAAa,WACbD,GAAa,IAKjB,OACI,6BACI,kBAAC,EAAD,CAAOR,OAAQO,EAAWN,UAAU,gBAAgBC,WAL3C,WACbM,GAAa,MAKT,yBAAKhB,UAAS,oBAAeA,IACzB,yBAAKA,UAAU,OACVa,EAAKK,KAAI,SAAAC,GAAM,OACZ,yBAAKnB,UAAU,aAAaoB,IAAKD,EAAOE,YACpC,kBAAC,EAAD,CAAOtB,OAAQoB,EAAOG,OACtB,yBAAKtB,UAAU,aACX,wBAAIA,UAAU,cAAcmB,EAAOI,WAAnC,IAAgDJ,EAAOK,WACvD,uBAAGxB,UAAU,aAAb,SAAgCmB,EAAOM,MACvC,uBAAGzB,UAAU,aAAb,aAAoCmB,EAAOO,UAC3C,kBAAC,EAAD,CAAQpB,QAASW,EAAYZ,KAAM,WAAnC,wB,OCJjBsB,EA5BA,SAAC9B,GACZ,OACI,6BACI,yBAAKG,UAAU,gEACX,uBAAGA,UAAU,eAAe4B,KAAK,KAAjC,WACA,4BAAQ5B,UAAU,iBAAiBK,KAAK,SAASwB,cAAY,WAAWC,cAAY,cAC5EC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAChE,0BAAMjC,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BkC,GAAG,cACzC,wBAAIlC,UAAU,sBACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAW4B,KAAK,KAA7B,QAAsC,0BAAM5B,UAAU,WAAhB,eAE1C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAW4B,KAAK,KAA7B,SAEJ,wBAAI5B,UAAU,YACV,uBAAGA,UAAU,WAAW4B,KAAK,KAA7B,cCHbO,EARA,SAACtC,GAEZ,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYgB,KAAMuB,EAAYpC,UAAU,mB,MCVrCqC,MAHf,WACI,OAAO,kBAAC,EAAD,OCMSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83c2c9b3.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n    className: string,\n    children?: React.ReactNode,\n    imgSrc?: string\n}\n\n\nconst Image = (props: Props): React.Element<*> => {\n    const {children, imgSrc} = props;\n    return (\n        <img className=\"w-25 p-3\" src={imgSrc}/>\n    )\n};\nexport default Image","import React from \"react\";\n\n\ntype Props = {\n    className: string,\n    disabled: boolean,\n    children?: React.ReactNode,\n    value?: string,\n    type: string,\n    onClick: Function\n}\n\nconst Button = (props: Props): React.Element<*> => {\n    const {children, disabled, value, type, onClick} = props;\n\n    return (\n        <button disabled={disabled} value={value} className={`btn btn-${type}`} onClick={onClick}>\n            {children}\n        </button>\n    )\n};\nexport default Button","import React from \"react\";\nimport Modal from 'react-bootstrap4-modal';\nimport Button from \"../../atoms/Button\";\n\ntype Props = {\n    children?: React.ReactNode,\n    isOpen?: boolean,\n    popupName?: string,\n    closePopup?: Function\n}\n\nconst Popup = (props: Props): React.Element<*> => {\n    const {isOpen, popupName,closePopup} = props;\n    if (isOpen) {\n        return (\n            <Modal visible={true}>\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\">{popupName}</h5>\n                </div>\n                <div className=\"modal-body\">\n                    <p>Enemy vessel approaching!</p>\n                </div>\n                <div className=\"modal-footer\">\n                    <Button type=\"secondary\" onClick={closePopup}>Close</Button>\n                    <Button type=\"primary\" onClick={closePopup}>Apply</Button>\n                </div>\n            </Modal>\n        )\n    } else return null;\n\n};\nexport default Popup","import React, {useState} from \"react\";\nimport Image from \"../../atoms/Image\";\nimport Button from \"../../atoms/Button\";\nimport Popup from \"../../molecules/Popup\";\n\ntype Props = {\n    size: string,\n    onClick: Function,\n    className: string,\n    disabled: boolean,\n    children?: React.ReactNode,\n    data?: Array\n}\n\n\nconst PlayerInfo = (props: Props): React.Element<*> => {\n    const {className, children, value, data} = props;\n\n    const [showPopup, setShowPopup] = useState(false);\n\n    let showDetail = function () {\n        setShowPopup(true);\n    };\n    let closePopup = function () {\n        setShowPopup(false);\n    };\n    return (\n        <div>\n            <Popup isOpen={showPopup} popupName=\"Player Detail\" closePopup={closePopup}></Popup>\n            <div className={`container ${className}`}>\n                <div className=\"row\">\n                    {data.map(player => (\n                        <div className=\"card col-4\" key={player.identifier}>\n                            <Image imgSrc={player.img2}/>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{player.first_name} {player.last_name}</h5>\n                                <p className=\"card-text\">Team: {player.team}</p>\n                                <p className=\"card-text\">Position: {player.position}</p>\n                                <Button onClick={showDetail} type={\"primary\"}>Show Detail</Button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n};\nexport default PlayerInfo","import React from \"react\";\n\ntype Props = {\n}\n\n\nconst Banner = (props: Props): React.Element<*> => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light  navbar-dark bg-primary\">\n                <a className=\"navbar-brand\" href=\"#\">Players</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\"\n                        aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Info</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Blog</a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        </div>\n\n    )\n};\nexport default Banner","import React from \"react\";\nimport PlayerInfo from \"../../organisms/PlayerInfo\";\nimport playerJson from \"../../../data/playerlist.json\"\nimport Banner from \"../../organisms/Banner\";\n\ntype Props = {\n    size: string,\n    onClick: Function,\n    className: string,\n    disabled: boolean,\n    children?: React.ReactNode\n}\n\nconst Player = (props: Props): React.Element<*> => {\n    let data = [];\n    return (\n        <div>\n            <Banner/>\n            <PlayerInfo data={playerJson} className=\"gapBtwBanner\"></PlayerInfo>\n        </div>)\n};\nexport default Player","import React from 'react';\nimport './App.css';\nimport Player from \"./components/templates/PlayerList\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n    return <Player/>\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}